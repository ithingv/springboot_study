chapter 1,2의 내용을 하나로 조합하고
규칙을 지정해서 어떤 방식으로 코드를 작성할 것인지
파라미터와 리턴 타입등에 대한 약속을 정한다.

전체적인 구조를 실습하기 위해 테이블이 하나로만 구성되는 방명록을 구성

1. 프로젝트의 계층별 구조와 객체들의 구성

화면설계서(와이어프레임) 제작, 화면의 url와 전달되는 파라미터등을 미리 결정할 수 있다.
데이터베이스 설계에 필요한 칼럼들을 미리 파악하는데도 도움이 된다.

화면구성

1. 목록화면 - 전체 목록을 페이징 처리해서 조회할 수 있고, 제목/내용/작성자 항목으로 검색과
페이징 처리를 가능하게 한다.

2. 등록화면 - 새로운 글을 등록할 수 있고, 등록 처리 후 다시 목록 화면으로 이동한다.

3. 조회화면 - 목록 화면에서 특정한 글을 선택하면 자동으로 조회 화면으로 이동한다.
조회 화면에서는 수정/삭제가 가능한 화면으로 버튼을 클릭해서 이동

4. 수정/삭제 화면 - 수정 화면에서 삭제가 가능하고 삭제 후에는 목록 페이지로 이동한다.
글을 수정하는 경우에는 다시 조회로 이동해서 수정된 내용을 확인할 수 있다.


기능          URL         GET/POST    기능              REDIRECT URL
목록  /guestbook/list     GET     목록/페이징/검색
등록  /guestbook/register GET     입력화면
    /guestbook/register  POST    등록처리               /guestbook/list
조회 /guestbook/read      GET     조회화면
수정 /guestbook/modify    GET     수정/삭제기능화면
    /guestbook/modify    POST    수정처리               /guestbook/read
삭제 /guestbook/remove    POST    삭제처리               /guestbook/list

|-------------------|-----컨트롤러---------|------서비스--------|----리포지토리-----|
    타임리프 페이지     GuestbookController   GuestbookService     GuestbookRepository
                                            인터페이스
                                           GuestbookServiceImpl

1. 브라우저에 들어오는 Request는 GuestbookController에서 처리
2. GuestbookController는 GuestbookService 타입을 주입받는 구조로 만들고, 이를 이용해서
원하는 작업을 처리
3. GuestbookRepository는 Spring data JPA를 이용해서 구성하고,
GuestbookServiceImpl 클래스에 주입해서 사용
4. 마지막 결과는 Thymeleaf를 이용해서 레이아웃 템플릿을 활용해서 처리

각 계층 사이에는 데이터를 주고받는 용도의 dto 클래스를 이용

-   브라우저에서 전달되는 Request는 GuestbookController에서 DTO의 형태로 처리됨
-   GuestbookRepository는 엔티티 타입을 이용하므로 중간에 Service 계층에서는
DTO와 엔티티 변호나을 처리

JPA를 이용하는 경우 엔티티 객체는 항상 JPA가 관리하는 콘텍스트에 속해있기 때문에 가능하면
JPA 영역을 벗어나지 않도록 작성성

2. Querydsl을 이용해서 동적으로 검색 조건을 처리하는 방법

3. Entity 객체와 DTO의 구분

4. 화면에서 페이징 처리

