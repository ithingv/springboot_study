데이터베이스와 Spring JPA

1. 마리아 DB 설치 및 스키마/계정 설정
2. 스프링 부트 프로젝트 데이터베이스 설정

db 설치
https://mariadb.org/
db 설정
db_name: bootex, username: bootuser, password: dltkd12 권한: READ/WRITE
jdbc 드라이버 설치
https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client/2.7.2
gradle plugin
// https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.2'


application.properties에서 스프링 프로젝트의 데이터베이스 설정 가능

HikariPool-1 - Starting...
HikariPool-1 - Start completed.
스프링 부트가 기본적으로 이용하는 커넥션 풀이 HikariCP 라이브러리를 이용함
기본 스프링 프로젝트는 직접 추가하고 설정해야 하지만 스프링부트는 자동으로 설정됨

3. Spring Data JPA를 이용한 CRUD와 페이징 기법 배우기

entity.Memo

Key 생성 전략
auto(default) - JPA 구현체(Hibernate)가 생성 방식을 결정
IDENTITY - 사용하는 데이터베이스가 키 생성을 결정 MYSQL이나 MariaDB의 경우 AUTO_INCREMENT
SEQUENCE - 데이터베이스의 SEQUENCE를 이용해서 키를 생성 @SequenceGenerator와 같이 사용
TABLE - 키 생성 전용 테이블을 생성해서 키 생성, @TableGenerator와 함께 사용

@Transient
직렬화 과정에서 제외하고 싶은 칼럼에 해당 애노테이션을 설정

application.properties jpa 설정

spring.jpa.hibernate.ddl-auto=update
프로젝트 실행 시에 자동으로 DDL을 생성할 것인지를 결정하는 설정 설정값은 CREATE, UPDATE, CREATE_DROP, VALIDATE가 있다.
CREATE의 경우 매번 테이블 생성을 시도 UPDATE의 경우 변경이 필요한 경우에는 ALTER로 변경되고 테이블이 없을 경우에는 CREATE가 되도록 설정한다.

spring.jpa.properties.hibernate.format_sql=true
실제 JPA의 구현체인 Hibernate가 동작하면서 발생하는 sql을 포맷팅해서 출력, 실행되는 sql의 가독성을 높여준다.

spring.jpa.show-sql=true
JPA 처리 시에 발생하는 SQL을 보여줄지 결정

Hibernate:

    create table tbl_memo (
       mno bigint not null auto_increment,
        memo_text varchar(200) not null,
        primary key (mno)
    ) engine=InnoDB


4. Jpa Repository 인터페이스를 활용하는 다양한 방법 익히기

JpaRepository -> PagingAndSortRepository -> CrudRepository -> Repository

일반적인 기능 (CrudRepository)
모든 JPA 관련 기능 JpaRepository를 이용

insert 작업 : save(엔티티 객체)
select 작업 : findById(키 타입), getOne(키 타입)
update 작업 : save(엔티티 객체)
delete 작업 : deleteById(키 타입) delete(엔티티 객체)

insert와 update의 save의 차이

Hibernate가 메모리상에서 객체를 비교하고 있다면 insert, 존재한다면 update를 동작시키는 방식으로 동작

JPA Test코드 작성을 통해 jpa crud 기능 테스트

chekc test class name
com.sun.proxy.$Proxy97

동적 프록시 객체가 생성됨.

페이징 / 정렬 처리하기

jpa는 내부적으로 dialect라는 존재를 이용해서 sql을 처리
application.properties를 통해 jdbc 정보가 해당 데이터베이스를 위한 dialect가 설정된다.

spring data jpa에서 페이징 처리와 정렬은 findAll() 이라는 메서드를 사용한다.
findAll()은 JpaRepository 인터페이스의 상위인 PagingAndSortRepository의 메서드로 파라미터로 전달되는 Pageable
이라는 타입의 객체에 의해서 실행되는 쿼리를 결정하게 된다. Page<T> 타입으로 지정하는 경우에는 반드시 파라미터를
Pageable 타입을 이용해야 한다.


Pageable 인터페이스

페이지 처리를 위한 가장 중요한 존재는 org.springframework.data.domain.Pageable 인터페이스이다.
페이지 처리에 필요한 정보를 전달하는 용도의 타입으로, 인터페이스이기 때문에 실제 객체를 생성할 때는 구현체는
org.springframework.data.domain.PageRequest라는 클래스를 사용한다.

PageRequest 클래스의 생성자는 특이하게도 protected로 선언되어 new를 이용할 수 없다.
객체를 생성하기 위해서는 static한 of()를 이용해서 처리한다.
PageRequest 생성자를 보면 page, size, Sort라는 정보를 이용해서 객체를 생성한다.

static 메서드인 of()의 경우 몇 가지의 형태가 존재하는데, 이는 페이지 처리에 필요한 정렬 조건을 같이 지정하기 위해서이다.

of(int page, int size) : 0부터 시작하는 페이지 번호의 개수(size), 정렬이 지정되지 않음
of(int page, int size, SortDirector direction, String...props): 0부터 시작하는 페이지 번호와 개수, 정렬의 방향과 정렬 기존 필드들)
of(int page, int size, Sort sort) 페이지 번호와 개수, 정렬 관련 정보

페이징 처리

쿼리 메서드 기능과 @Query

다양한 검색 조건에 대한 부분을 해결

쿼리 메서드 : 메서드의 이름 자체가 쿼리의 구문으로 처리되는 기능
@Query: sql과 유사하게 인티티 클래스의 정보를 이용해서 쿼리를 작성하는 기능
Querydsl 등의 동적 쿼리 기능

쿼리 메서드

메서드의 이름 자체가 쿼리문이 되는 기능

select를 하는 작업이면 List 타입이나 배열을 이용할 수 있다.
파라미터에 Pageable 타입을 넣는 경우에는 무조건 Page<E> 타입

Memo 객체의 mno 값이 70부터 80사이의 객체들을 구하고 mno의 역순으로 정렬하고 싶다면 다음과 같은 메서드를 MemoRepository 인터페이스에
추가한다.

findMnoBetweenOrderByMnoDesc(Long from, Long to);


@Query 어노테이션

Spring Data Jpa가 제공하는 쿼리 메서드는 검색과 같은 기능을 작성할 때 편리함을 제공하기는 하지만 나중에
조인이나 복잡한 조건을 처리해야 하는 경우에는 And, Or 등이 사용되면서 조금 불편할 떄가 많다.
일반적인 경우에는 간단한 처리만 쿼리메서드를 이용하고 @Query를 이용하는 경우가 더 많다.

@Query의 경우에는 메서드의 이름과 상관없이 메서드에 추가한 어노테이션을 통해서 원하는 처리가 가능하다.
@Query의 value는 JPQL로 작성하는데 흔히 객체지향 쿼리라고 불리는 구문들이다.

필요한 데이터만 선별적으로 추출하는 기능이 가능
데이터베이스에 맞는 순수한 SQL을 사용하는 기능
insert, update, delete와 같은 select가 안니 DML을 처리하는 기능
@Modifying 과 함꼐 사용
